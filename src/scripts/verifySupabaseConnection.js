import supabase from '../api/supabaseClient.js';

/**
 * Script para verificar la conexi√≥n con Supabase y la estructura de la base de datos
 */

async function verifyConnection() {
  console.log('üîç Verificando conexi√≥n con Supabase...');
  
  try {
    // Verificar configuraci√≥n
    const url = import.meta.env.VITE_SUPABASE_URL;
    const key = import.meta.env.VITE_SUPABASE_ANON_KEY;
    
    console.log('üìã Configuraci√≥n:');
    console.log(`URL: ${url}`);
    console.log(`Key: ${key ? key.substring(0, 20) + '...' : 'NO DEFINIDA'}`);
    
    if (!url || !key) {
      console.error('‚ùå Variables de entorno no configuradas correctamente');
      return false;
    }
    
    // Probar conexi√≥n b√°sica
    const { data, error } = await supabase.auth.getSession();
    
    if (error) {
      console.error('‚ùå Error al conectar con Supabase:', error.message);
      return false;
    }
    
    console.log('‚úÖ Conexi√≥n con Supabase exitosa');
    return true;
    
  } catch (error) {
    console.error('‚ùå Error de conexi√≥n:', error);
    return false;
  }
}

async function verifyTables() {
  console.log('\nüóÑÔ∏è Verificando estructura de tablas...');
  
  const tables = ['usuarios', 'pacientes', 'evaluaciones', 'resultados'];
  
  for (const table of tables) {
    try {
      const { data, error, count } = await supabase
        .from(table)
        .select('*', { count: 'exact', head: true });
      
      if (error) {
        console.log(`‚ùå Tabla '${table}': ${error.message}`);
      } else {
        console.log(`‚úÖ Tabla '${table}': ${count || 0} registros`);
      }
    } catch (error) {
      console.log(`‚ùå Tabla '${table}': Error - ${error.message}`);
    }
  }
}

async function verifyUsers() {
  console.log('\nüë• Verificando usuarios existentes...');
  
  try {
    const { data: users, error } = await supabase
      .from('usuarios')
      .select('id, documento, nombre, apellido, rol, activo, fecha_creacion')
      .order('fecha_creacion', { ascending: false });

    if (error) {
      console.error('‚ùå Error al obtener usuarios:', error.message);
      return;
    }

    if (!users || users.length === 0) {
      console.log('‚ö†Ô∏è No hay usuarios en la base de datos');
      console.log('üí° Ejecuta el script createTestUsers.js para crear usuarios de prueba');
      return;
    }

    console.log(`üìä Total de usuarios: ${users.length}`);
    console.log('\nüë§ Usuarios registrados:');
    
    users.forEach((user, index) => {
      const status = user.activo ? 'üü¢' : 'üî¥';
      const roleIcon = user.rol === 'administrador' ? 'üëë' : 
                      user.rol === 'psicologo' ? 'üë®‚Äç‚öïÔ∏è' : 'üë®‚Äçüéì';
      
      console.log(`${index + 1}. ${status} ${roleIcon} ${user.nombre} ${user.apellido}`);
      console.log(`   Rol: ${user.rol} | Documento: ${user.documento}`);
      console.log(`   Creado: ${new Date(user.fecha_creacion).toLocaleDateString()}`);
      console.log('');
    });

  } catch (error) {
    console.error('‚ùå Error al verificar usuarios:', error);
  }
}

async function testAuth() {
  console.log('\nüîê Probando autenticaci√≥n...');
  
  try {
    // Verificar si hay una sesi√≥n activa
    const { data: { session } } = await supabase.auth.getSession();
    
    if (session) {
      console.log('‚úÖ Sesi√≥n activa encontrada');
      console.log(`üë§ Usuario: ${session.user.email}`);
      
      // Obtener perfil del usuario
      const { data: profile, error } = await supabase
        .from('usuarios')
        .select('*')
        .eq('id', session.user.id)
        .single();
      
      if (error) {
        console.log('‚ö†Ô∏è Usuario autenticado pero sin perfil en tabla usuarios');
      } else {
        console.log(`üë§ Perfil: ${profile.nombre} ${profile.apellido} (${profile.rol})`);
      }
    } else {
      console.log('‚ÑπÔ∏è No hay sesi√≥n activa');
    }
    
  } catch (error) {
    console.error('‚ùå Error al verificar autenticaci√≥n:', error);
  }
}

async function verifyRLS() {
  console.log('\nüîí Verificando Row Level Security (RLS)...');
  
  try {
    // Intentar acceder a la tabla usuarios sin autenticaci√≥n
    const { data, error } = await supabase
      .from('usuarios')
      .select('count')
      .limit(1);
    
    if (error) {
      if (error.message.includes('RLS') || error.message.includes('policy')) {
        console.log('‚úÖ RLS est√° activo (esto es bueno para seguridad)');
      } else {
        console.log('‚ö†Ô∏è Error inesperado:', error.message);
      }
    } else {
      console.log('‚ö†Ô∏è RLS podr√≠a no estar configurado correctamente');
    }
    
  } catch (error) {
    console.log('‚ö†Ô∏è Error al verificar RLS:', error.message);
  }
}

async function runFullDiagnostic() {
  console.log('üöÄ Iniciando diagn√≥stico completo de Supabase...\n');
  
  const connectionOk = await verifyConnection();
  
  if (!connectionOk) {
    console.log('\n‚ùå No se puede continuar sin conexi√≥n a Supabase');
    return;
  }
  
  await verifyTables();
  await verifyUsers();
  await testAuth();
  await verifyRLS();
  
  console.log('\n‚ú® Diagn√≥stico completado');
  console.log('\nüìù Pr√≥ximos pasos recomendados:');
  console.log('1. Si no hay usuarios, ejecuta: createTestUsers.js');
  console.log('2. Verifica que las pol√≠ticas RLS est√©n configuradas');
  console.log('3. Prueba el login en la aplicaci√≥n');
}

// Funciones disponibles para ejecutar desde la consola
if (typeof window !== 'undefined') {
  window.supabaseDiagnostic = {
    full: runFullDiagnostic,
    connection: verifyConnection,
    tables: verifyTables,
    users: verifyUsers,
    auth: testAuth,
    rls: verifyRLS
  };
  
  console.log('üõ†Ô∏è Funciones de diagn√≥stico disponibles en window.supabaseDiagnostic:');
  console.log('- full(): Diagn√≥stico completo');
  console.log('- connection(): Verificar conexi√≥n');
  console.log('- tables(): Verificar tablas');
  console.log('- users(): Verificar usuarios');
  console.log('- auth(): Verificar autenticaci√≥n');
  console.log('- rls(): Verificar Row Level Security');
}

// Ejecutar autom√°ticamente si se importa
runFullDiagnostic();

export { 
  runFullDiagnostic, 
  verifyConnection, 
  verifyTables, 
  verifyUsers, 
  testAuth, 
  verifyRLS 
};
